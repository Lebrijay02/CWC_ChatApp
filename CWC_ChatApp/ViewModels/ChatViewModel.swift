//
//  ChatViewModel.swift
//  CWC_ChatApp
//
//  Created by Juan Lebrija on 18/02/24.
//

import Foundation
import SwiftUI

class ChatViewModel: ObservableObject{
    @Published var chats = [Chat]()
    @Published var selectedChat : Chat?
    @Published var messages = [ChatMessasge]()
    var dbService = DatabaseService()
    
    init(){
        //retrieve chats when viewmodel is created
        print("Getting chats")
        getChats()
    }
    func getChats(){
        dbService.getAllChats { chats in
            self.chats = chats
        }
    }
    //check if chat exists, if not, create chat
    func getChatFor(contact: User){
        //check user
        guard contact.id != nil else{
            return
        }
        let chatFound = chats.filter{chat in
            return chat.numparticipants == 2 && chat.participantids.contains(contact.id!)
        }
        if !chatFound.isEmpty{
            //set as selected chat
            self.selectedChat=chatFound.first!
            //fetch mssgs
            getMessages()
        }else{
            //no chat, creat new
            let newChat = Chat(numparticipants: 2, participantids: [AuthViewModel.getLoggedInUserId(), contact.id!])
            //set chat
            self.selectedChat = newChat
            //save new chat to db
            dbService.createChat(chat: newChat) { docId in
                //set doc id from autogenerated doc in argument
                self.selectedChat = Chat(id: docId, numparticipants: 2, participantids: [AuthViewModel.getLoggedInUserId(), contact.id!])
                //add chat to chatlist
                self.chats.append(self.selectedChat!)
            }
        }
    }
    func getMessages(){
        guard selectedChat != nil else{
            return
        }
        dbService.getAllMessages(chat: selectedChat!) { msgs in
            self.messages = msgs
        }
    }
    func sendMessage(msg : String){
        guard selectedChat != nil else{
            return
        }
        dbService.sendMessage(msg: msg, chat: selectedChat!)
    }
    func sendPhotoMessage(img : UIImage){
        guard selectedChat != nil else{
            return
        }
        dbService.sendPhotoMessage(img: img, chat: selectedChat!)
    }
    func closeConversationView(){
        dbService.detatchConversationViewListeners()
    }
    func closeChatListView(){
        dbService.detatchChatListViewListeners()
    }
    func getparticipantIds() -> [String] {
        guard selectedChat != nil else{
            return [String]()
        }
        print(selectedChat!)
        let ids = selectedChat!.participantids.filter{id in
            id != AuthViewModel.getLoggedInUserId()
        }
        print(ids)
        return ids
    }
}
